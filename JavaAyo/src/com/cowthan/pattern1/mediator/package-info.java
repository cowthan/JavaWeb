/**
 *  中介者模式：调停者模式
 *  
 *  这是一种很简单的封装方法，主要是为了隔离多个类之间的相互依赖：
 *  1、基本思想：既然你们都是相互依赖的，那就别依赖了，你们把相互依赖才能完成的业务交给我，
 *     我来处理，你们就都依赖我就行了
 *    
 *  2、使用原则：当类图中出现网状结构时，考虑使用中介者模式，因为基本上类间的依赖是必须的，
 *     并不是所有情况下都需要隔离
 *  
 *  3、如果在某个项目中，一个类中的某个方法还不确定是不是需要依赖其他类，就可以把这个业务
 *     放到中介者中处理，为未来可能的变化做准备
 *     
 *     
 *  实例：
 *  销售，库存，采购三个模块，假设是三个同事来分管，那他们三个之间就有严重的相互依赖，每个人
 *  负责的业务，也就是类中的方法分为两种：
 *  1、自发行为：要完成这些行为不需要与其他人交互
 *  2、依赖方法：必须依赖其他人才能完成的行为，这些就由中介者管理
 *  
 *  
 *  机场调度中心是中介者
 *  MVC框架中的C是中介者，分离业务逻辑和表现
 *  媒体网关是中介者
 *  中介服务是中介者
 *  
 *  注意：
 *  1、对于同事类，虽然有共同的基类，但在中介者模式中的同事类一般都由各自的业务，所以
 *  不必非得依赖于接口（依赖反转），不依赖翻转也同样是好设计
 *  ——进一步的解释就是：在这里类需要表现出自己的个性，而不是表现出自己继承自父类的接口，
 *  所以不必依赖倒转，这也可以看出继承是一种强侵入式的行为
 *  
 *  2、如果业务太复杂，可以按照业务种类创建多个中介者
 *  
 *  3、中介者可能会发生膨胀，即一个中介者中处理了过多业务
 *  
 *  4、不要滥用中介者模式，只有在依赖关系过于复杂时使用，将网状模型变成星形模型
 *  
 */
package com.cowthan.pattern1.mediator;