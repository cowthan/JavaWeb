/**
 * 抽象工厂模式：  先看看下面的分析，我还没搞明白反正，太乱了，具体问题就在于这个模式怎么扩展
 * 
 * 先明白两个概念：
 * 在有多个业务品种，业务分类时，有下面这么几个概念
 * 1、产品族，也叫产品线，不同的产品族的产品，应该可以组装成一件高等级产品，
 * 如螺丝是一个产品族，分不同型号的螺丝，铁板是一个产品族，分不同型号的铁板，
 * 门把手是一个产品族，分不同型号的门把手
 * ——螺丝，铁板，门把手就可以组成一个车门
 * 
 * 2、产品等级：不同型号的螺丝，不同型号的铁板，这个不同型号就是不同产品等级
 * 
 * 所以对于产品而言：有两种选择
 * 
 * 1、当产品族需要可扩展时：
 * 有个：IProduct接口
 * 有N个：AbstractXXProduct， N就是产品族的数量，如Abstract_Luosi，Abstract_Tieban,
 *        Abstract_MenBaShou
 * 对于每个产品族，有M个子类：Luosi_10, Luosi_12, Luosi_20, ...，M就是产品等级的数量
 * ——一共有M*N子类， N个抽象类，1个接口
 * 
 * 扩展产品族只需要增加一个AbstractXXX, 和M个产品等级的子类
 * 
 * 2、当产品等级需要可扩展时：
 * 一般是这样，因为基本上增加产品族，就相当于增加产品线，
 * 这不容易，但是增加产品等级，不需要扩展产品线，只要在
 * 原先产品线上增加个等级就行
 * 
 * 对于工厂而言：
 * ——有个最大接口：AbstractFactory
 * ——生产一个产品族，需要一个车间，就是一个XXXFactory，所以：
 * 
 * 螺丝_Factory{
 *   create_10号螺丝();
 *   create_12号螺丝();
 *   create_20号螺丝();
 * }
 * 
 * 铁板_Factory{
 *   create_10号铁板();
 *   create_12号铁板();
 *   create_20号铁板();
 * }
 * 
  * 门把手_Factory{
 *   create_10号门把手();
 *   create_12号门把手();
 *   create_20号门把手();
 * }
 * 
 */
package com.cowthan.pattern1.factory.abstract_facory;